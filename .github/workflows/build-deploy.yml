name: Build and Deploy Code

on:   #trigger for cicd code to run; refer docs for all kinds of triggers like below
  push: # trigger on push requests 
    branches: #trigger push on branches of lists below
      - "main" #list all the other branches below if any needed triggering
  pull_request: #trigger on pull requests
    branches:
      - "main"

jobs: #jobs to run after the trigger
  
  job1:   #jobName
  
    environment: #for the environments set in github, to access the specified env vars
      name: testing #name of the env from github
  
    env: #this env vars are accessible for this job only. mention env at 'on' level to be asscessible to all jobs
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}} #access the env values stores in secrets of github here like this
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}

    services:  #set up postgres service container for testing; refer the article about this
      postgres: 
        image: postgres
        env: 
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test #since the testing code uses this _test DB
        ports:
          - 5432:5432 #hard coded thse here since mentioning as vars gives errors
        options: >-  #copied from the article to check the DB is running and OK
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest #type of machine to run the job on
  
    steps: #named pipeline steps

      - name: pulling git repo #give name for the step
        uses: actions/checkout@v2  # use checkout from market place for git pull#command to be running; refer market place for common tasks prebuilt actions 
    
      - name: run a linux CLI command
        run: echo "heloo" #to run a linux command here coz we are on linux
    
      - name: Install python version 3.9
        uses: actions/setup-python@v2 #use setup-python from actions
        with:
          python-version: "3.9"
    
      - name: update pip
        run: python -m pip install --upgrade pip #command to be run on our linuc machine
    
      - name: install all dependancies
        run: pip install -r requirements.txt
    
      - name: test with pytest
        run: | #the pipe put here means that we can run multiple command as seen below
          pip install pytest
          pytest -s -x



  

      
